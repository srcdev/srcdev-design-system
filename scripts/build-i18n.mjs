#!/usr/bin/env node

import { readdir, readFile, writeFile } from "fs/promises"
import { join, dirname } from "path"
import { fileURLToPath } from "url"

const __dirname = dirname(fileURLToPath(import.meta.url))
const localesDir = join(__dirname, "../i18n/locales")
const outputDir = join(__dirname, "../i18n/i18n/locales")

// Supported locales
const locales = ["en-GB", "zh-CN", "ar-YE"]

// Helper function to deep merge objects
function deepMerge(target, source) {
  const result = { ...target }

  for (const key in source) {
    if (source[key] && typeof source[key] === "object" && !Array.isArray(source[key])) {
      result[key] = deepMerge(result[key] || {}, source[key])
    } else {
      result[key] = source[key]
    }
  }

  return result
}

// Function to recursively find JSON files for a locale
async function findLocaleFiles(dir, locale) {
  const files = []

  async function searchDir(currentDir) {
    try {
      const entries = await readdir(currentDir, { withFileTypes: true })

      for (const entry of entries) {
        const fullPath = join(currentDir, entry.name)

        if (entry.isDirectory()) {
          await searchDir(fullPath)
        } else if (entry.isFile() && entry.name === `${locale}.json`) {
          files.push(fullPath)
        }
      }
    } catch {
      // Ignore errors (e.g., permission issues)
    }
  }

  await searchDir(dir)
  return files
}

// Function to generate a merged locale file
async function generateMergedLocale(locale) {
  const files = await findLocaleFiles(localesDir, locale)
  let mergedTranslations = {}

  for (const filePath of files) {
    try {
      const content = await readFile(filePath, "utf8")
      const json = JSON.parse(content)
      mergedTranslations = deepMerge(mergedTranslations, json)
    } catch (error) {
      console.warn(`‚ö†Ô∏è  Failed to read ${filePath}:`, error.message)
    }
  }

  return mergedTranslations
}

// Generate TypeScript file content
function generateTypeScriptFile(locale, translations) {
  return `// Auto-generated locale file for ${locale}
// This file is generated by running 'npm run build:i18n'
// Do not edit this file directly - edit the JSON files in i18n/locales/ instead

export default ${JSON.stringify(translations, null, 2)} as const`
}

async function generateLocaleFiles() {
  console.log("üåç Generating i18n locale files...")

  for (const locale of locales) {
    try {
      const translations = await generateMergedLocale(locale)
      const content = generateTypeScriptFile(locale, translations)
      const filePath = join(outputDir, `${locale}.ts`)

      await writeFile(filePath, content, "utf8")
      console.log(`‚úÖ Generated ${locale}.ts`)
    } catch (error) {
      console.error(`‚ùå Failed to generate ${locale}.ts:`, error)
    }
  }

  console.log("üéâ i18n locale files generated successfully!")
}

// Run if this file is executed directly
if (import.meta.url === `file://${process.argv[1]}`) {
  generateLocaleFiles().catch(console.error)
}

export { generateLocaleFiles }
